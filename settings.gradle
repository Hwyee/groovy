rootProject.name = 'groovy'
//include其实是一个方法,省略了小括号
//include('hello-groovy')
include 'hello-groovy'
//子工程还可以再包含子工程,用冒号隔开
//include 'hello-groovy:sub-hello-groovy'

//钩子函数
//gradle.settingsEvaluated { //1.settingsEvaluated钩子函数,在初始化阶段完成
//    println "settingsEvaluated"
//}
//gradle.projectsLoaded { //2.projectsLoaded钩子函数,在初始化阶段完成
//    println "projectsLoaded"
//}
////声明一个变量：表示当前项目名,在每次执行某个项目的beforeEvaluate方法时先给projectName变量赋值
////这样方便在：gradle.beforeProject和afterProject两个钩子函数使用。
//def projectName = ""
//gradle.addProjectEvaluationListener(new ProjectEvaluationListener() {
//    //3.执行各个project的beforeEvaluate：在配置阶段完成
//    @Override
//    void beforeEvaluate(Project project) {
//        projectName =  println "${project.name} Project beforeEvaluate"
//    }
//    //5.执行各个project的afterEvaluate：在配置阶段完成
//    @Override
//    void afterEvaluate(Project project, ProjectState projectState) {
//        println "${project.name} Project afterEvaluate"
//    }
//}); gradle.beforeProject {//4.执行各个project的beforeProject：在配置阶段完成
//    println "${projectName} beforeProject..."
//}
//gradle.afterProject {//6.执行各个project的afterProject：在配置阶段完成
//    println "${projectName} afterProject..."
//}
////7.所有工程的 build.gradle 执行完毕后，回调 Gradle 对象的 projectsEvaluated 方法：在配置阶段完成
//def rootProjectName = rootProject.getName()
//gradle.projectsEvaluated {
//    println "${rootProjectName} projectsEvaluated..."
//}
////8.配置阶段完毕后，回调 TaskExecutionGraph 对象的 whenReady 方法：在配置阶段完成
//gradle.taskGraph.whenReady {
//    println "${rootProjectName} taskGraph whenReady..."
//}
////9.在当前Task执行之前,会回调 TaskExecutionGraph 对象的 beforeTask方法：在执行阶段完成
//gradle.taskGraph.beforeTask { task ->
//    println "this is the task ${task.name} of the project ${task.getProject().name} beforeTask.."
//}
////10.在当前Task执行之后,会回调 TaskExecutionGraph 对象的 afterTask方法：在执行阶段完成
//gradle.taskGraph.afterTask { task ->
//    println "this is the task ${task.name} of the project ${task.getProject().name} afterTask.."
//}
////11.当所有的 Task 执行完毕后，会回调 Gradle 对象的 buildFinish 方法：在执行阶段完成
//gradle.buildFinished {
//    println "${rootProjectName} buildFinished..."
//}

//查看所有task的有向图
//gradle.taskGraph.addTaskExecutionGraphListener(new TaskExecutionGraphListener() {
//    @Override //生成有向无环图
//    void graphPopulated(TaskExecutionGraph taskExecutionGraph) {
//        taskExecutionGraph.allTasks.forEach(task->{//核心逻辑:通过taskExecutionGraph获得所有的task
//            taskExecutionGraph.allTasks.forEach(releaseTask->{
//                println "Hwyee:" + releaseTask.getProject().name + ":" + releaseTask.name })
//        })
//    }
//})